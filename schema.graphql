# ===============================
#           Core Entities
# ===============================

enum AppSource {
    BODHI           # fundamental protocol assets
    SPACE           # space app assets
    WISHPOOL        # wishpool app assets
}

enum AssetType {
    ORIGINAL        # original Bodhi assets
    SPACE           # space contract
    SPACE_POST      # post in space
    WISH            # wishpool wish
    SUBMISSION      # wishpool submission
}

type Asset @entity {
    # Identity
    id: ID!
    assetId: BigInt!
    arTxId: String
    
    # Creator Info
    creator: User             # who created the asset (in Bodhi)
    realCreator: Bytes        # who is real author of content (in apps)
    createdAt: BigInt!

    # State
    removed: Boolean!
    lastTradeDirection: Int!  # 1 for up/buy, -1 for down/sell, 0 for initial
    
    # App and Asset Type
    app: AppSource!
    assetType: AssetType!
    
    # Statistics
    totalSupply: BigDecimal!
    totalTrades: BigInt!
    totalFees: BigDecimal!
    totalVolume: BigDecimal!
    totalHolders: BigInt!
    
    # Relations
    spacePost: SpacePost
    holders: [UserAsset!]! @derivedFrom(field: "asset")
}

type User @entity {
    # Identity
    id: ID!
    address: Bytes!           # address
    
    # Statistics
    creatorProfit: BigDecimal!
    tradingPnl: BigDecimal!
    totalTrades: BigInt!
    
    # Relations
    assets: [UserAsset!]! @derivedFrom(field: "user")
    trades: [Trade!]! @derivedFrom(field: "user")
}

type UserAsset @entity {
    # Identity
    id: ID!                   # `user.id.concat(asset.id)`
    assetId: BigInt!
    
    # Position Info
    amount: BigDecimal!
    avgPrice: BigDecimal!
    
    # Relations
    user: User!
    asset: Asset!
}

# ===============================
#           Core Events
# ===============================

type Create @entity(immutable: true) {
    # Identity
    id: Bytes!
    assetId: BigInt!          # uint256
    
    # Info
    sender: Bytes!            # address
    arTxId: String!          # string
    
    # Metadata
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type Remove @entity(immutable: true) {
    # Identity
    id: Bytes!
    assetId: BigInt!          # uint256
    
    # Info
    sender: Bytes!            # address
    
    # Metadata
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type Trade @entity(immutable: true) {
    # Identity
    id: Bytes!
    assetId: BigInt!          # uint256
    
    # Trade Info
    tradeType: Int!           # uint8
    tokenAmount: BigDecimal!
    ethAmount: BigDecimal!
    creatorFee: BigDecimal!
    price: BigDecimal!
    proxy: Int!               # uint8 (0: none, 1: space.create, 2: helper.safeBuy)
    supplyAfterTrade: BigDecimal!  # total supply after this trade (for price calculation)
    
    # Participants
    user: User!               # address
    realSender: Bytes         # address
    
    # Relations
    asset: Asset!
    
    # Metadata
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
    # Identity
    id: Bytes!
    assetId: BigInt!          # uint256
    amount: BigInt!           # uint256
    
    # Participants
    operator: Bytes!          # address
    from: Bytes!              # address
    to: Bytes!                # address
    
    # Metadata
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

# ===============================
#           Trade Helper
# ===============================

type SafeBuy @entity(immutable: true) {
    # Identity
    id: Bytes!
    assetId: BigInt!          # uint256
    
    # Trade Info
    sender: Bytes!
    tokenAmount: BigDecimal!
    ethAmount: BigDecimal!
    
    # Metadata
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type ProxyTrade @entity {
    id: Bytes!                # tx hash
    realSender: Bytes!        # address
    proxy: Int!               # uint8 (0 none, 1 space.create, 2 helper.safeBuy)
}

# ===============================
#           Space App
# ===============================

type Space @entity {
    # Identity
    id: ID!                   # space contract address
    spaceId: BigInt!          # can be used for sorting
    spaceName: String!
    spaceAddress: Bytes!      # address
    
    # Statistics
    totalPosts: BigInt!
    
    # Relations
    creator: User!
    asset: Asset!
    user: User!              # space as user (for revenue)
}

type SpacePost @entity {
    # Identity
    id: ID!                   # asset id
    assetId: BigInt!         # for sorting (latest)
    spaceId: BigInt!
    
    # Post Structure
    isRoot: Boolean!
    parentId: BigInt!
    rootId: BigInt!
    removedFromSpace: Boolean!
    
    # Statistics
    totalReplies: BigInt!
    
    # Relations
    asset: Asset!
    creator: User!
    parent: SpacePost
    children: [SpacePost!]! @derivedFrom(field: "parent")
}

# ===============================
#           Wishpool App
# ===============================

type Wish @entity {
    # Identity
    id: ID!
    
    # Wish Info
    createdAt: BigInt!
    closedAt: BigInt
    ethAmount: BigDecimal
    tokenAmount: BigDecimal
    
    # Participants
    creator: Bytes!
    solver: Bytes
    
    # Relations
    asset: Asset!
    submissions: [Submission!]! @derivedFrom(field: "wish")
    selectedSubmission: Submission
}

type Submission @entity {
    # Identity
    id: ID!
    
    # Info
    createdAt: BigInt!
    isRewarded: Boolean!
    
    # Relations
    wish: Wish!
    creator: Bytes!
    asset: Asset!
}
